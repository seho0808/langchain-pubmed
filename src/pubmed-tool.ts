import { Tool } from "@langchain/core/tools";
import { PubMedAPIWrapper } from "./pubmed-api.js";
import { PubMedAPIWrapperOptions } from "./types.js";

/**
 * PubMed tool integration for searching biomedical literature.
 *
 * PubMed is a free search engine accessing primarily the MEDLINE database
 * of references and abstracts on life sciences and biomedical topics.
 *
 * Setup:
 * Install `langchain-pubmed` and its peer dependencies.
 *
 * ```bash
 * npm install langchain-pubmed @langchain/core
 * ```
 *
 * ## Environment Variables
 *
 * You can set the following environment variables to avoid passing them in code:
 * - `PUBMED_EMAIL`: Your email address (recommended by NCBI for better support)
 * - `PUBMED_API_KEY`: Optional API key for higher rate limits
 *
 * ## [Constructor args](https://github.com/yourusername/langchain-pubmed)
 *
 * <details open>
 * <summary><strong>Instantiate</strong></summary>
 *
 * ```typescript
 * import { PubMedTool } from "langchain-pubmed";
 *
 * const tool = new PubMedTool({
 *   topKResults: 3,
 *   email: "your_email@example.com", // or set PUBMED_EMAIL env var
 *   apiKey: "your_api_key" // optional, or set PUBMED_API_KEY env var
 * });
 * ```
 * </details>
 *
 * <br />
 *
 * <details>
 * <summary><strong>Invocation</strong></summary>
 *
 * ```typescript
 * const result = await tool.invoke("covid-19 vaccine efficacy");
 * console.log(result);
 * // Output: Published: 2024-01-15
 * //         Title: COVID-19 Vaccine Efficacy Studies
 * //         Summary: ...
 * ```
 * </details>
 *
 * <br />
 *
 * <details>
 * <summary><strong>Invocation with tool call</strong></summary>
 *
 * ```typescript
 * // This is usually generated by a model, but we'll create a tool call directly for demo purposes.
 * const modelGeneratedToolCall = {
 *   args: {
 *     input: "latest research on alzheimer's disease treatment",
 *   },
 *   id: "tool_call_id_123",
 *   name: tool.name,
 *   type: "tool_call",
 * };
 * const result = await tool.invoke(modelGeneratedToolCall);
 * ```
 *
 * ```text
 * ToolMessage {
 *   "content": "Published: 2024-02-10\nTitle: Novel Approaches in Alzheimer's Treatment...",
 *   "name": "pubmed",
 *   "additional_kwargs": {},
 *   "response_metadata": {},
 *   "tool_call_id": "tool_call_id_123"
 * }
 * ```
 * </details>
 *
 * <br />
 *
 * <details>
 * <summary><strong>Using with an agent</strong></summary>
 *
 * ```typescript
 * import { ChatOpenAI } from "@langchain/openai";
 * import { createReactAgent } from "@langchain/langgraph/prebuilt";
 * import { PubMedTool } from "langchain-pubmed";
 *
 * const model = new ChatOpenAI({ model: "gpt-4" });
 * const tools = [new PubMedTool({ topKResults: 5 })];
 *
 * const agent = createReactAgent({ llm: model, tools });
 *
 * const result = await agent.invoke({
 *   messages: [{ role: "user", content: "What are the latest treatments for type 2 diabetes?" }]
 * });
 * ```
 * </details>
 */
export class PubMedTool extends Tool {
  static lc_name() {
    return "PubMedTool";
  }

  get lc_secrets(): { [key: string]: string } | undefined {
    return {
      apiKey: "PUBMED_API_KEY",
    };
  }

  name = "pubmed";

  description =
    "A search engine for the PubMed biomedical literature database. " +
    "Useful for answering questions about medicine, health, diseases, treatments, drugs, " +
    "clinical trials, and scientific research from peer-reviewed journals. " +
    "Input should be a search query with medical or scientific terms. " +
    "Example queries: 'covid-19 vaccine efficacy', 'diabetes treatment guidelines', 'cancer immunotherapy research'.";

  private apiWrapper: PubMedAPIWrapper;

  constructor(params: PubMedAPIWrapperOptions = {}) {
    super(params);
    this.apiWrapper = new PubMedAPIWrapper(params);
  }

  /** @ignore */
  async _call(query: string): Promise<string> {
    return this.apiWrapper.run(query);
  }

  /**
   * Invokes the PubMed tool with a search query.
   * This method is inherited from the Tool base class but explicitly typed here
   * for better TypeScript inference in generated .d.ts files.
   *
   * @param input The search query string
   * @returns Promise resolving to formatted search results
   */
  declare invoke: (input: string) => Promise<string>;
}
